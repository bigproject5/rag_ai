server:
  port: 8085

spring:
  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:ragdb}
    username: ${DB_USER:user}
    password: ${DB_PASS:pass}
    driver-class-name: org.postgresql.Driver

  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: validate # On startup, validate the schema, don't create or drop tables.
    show-sql: true # Log SQL statements for debugging
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP:localhost:9092}
    consumer:
      group-id: rag-ai
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: true
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true

rag:
  topic:
    ingest: ${TOPIC_INGEST:rag.ingest}
    query:  ${TOPIC_QUERY:rag.query}
    result: ${TOPIC_RESULT:rag.result}

# OpenAI Configuration
openai:
  base-url: https://api.openai.com/v1
  api-key: ${OPENAI_API_KEY}
  chat-model: gpt-4o-mini
  embed-model: text-embedding-3-large
